// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: lib/grpc/space.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LaunchService_GetLatestLaunch_FullMethodName = "/space.LaunchService/GetLatestLaunch"
	LaunchService_GetRocket_FullMethodName       = "/space.LaunchService/GetRocket"
	LaunchService_GetRockets_FullMethodName      = "/space.LaunchService/GetRockets"
	LaunchService_GetMathFact_FullMethodName     = "/space.LaunchService/GetMathFact"
	LaunchService_GetAPOD_FullMethodName         = "/space.LaunchService/GetAPOD"
)

// LaunchServiceClient is the client API for LaunchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Launch service definition
type LaunchServiceClient interface {
	// Get the latest launch
	GetLatestLaunch(ctx context.Context, in *LatestLaunchRequest, opts ...grpc.CallOption) (*Launch, error)
	// Get a specific rocket by ID
	GetRocket(ctx context.Context, in *GetRocketRequest, opts ...grpc.CallOption) (*Rocket, error)
	// Get all rockets
	GetRockets(ctx context.Context, in *GetRocketsRequest, opts ...grpc.CallOption) (*GetRocketsResponse, error)
	// Get a random math fact
	GetMathFact(ctx context.Context, in *GetMathFactRequest, opts ...grpc.CallOption) (*MathFact, error)
	// Get NASA Astronomy Picture of the Day
	GetAPOD(ctx context.Context, in *GetAPODRequest, opts ...grpc.CallOption) (*APOD, error)
}

type launchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLaunchServiceClient(cc grpc.ClientConnInterface) LaunchServiceClient {
	return &launchServiceClient{cc}
}

func (c *launchServiceClient) GetLatestLaunch(ctx context.Context, in *LatestLaunchRequest, opts ...grpc.CallOption) (*Launch, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Launch)
	err := c.cc.Invoke(ctx, LaunchService_GetLatestLaunch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) GetRocket(ctx context.Context, in *GetRocketRequest, opts ...grpc.CallOption) (*Rocket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rocket)
	err := c.cc.Invoke(ctx, LaunchService_GetRocket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) GetRockets(ctx context.Context, in *GetRocketsRequest, opts ...grpc.CallOption) (*GetRocketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRocketsResponse)
	err := c.cc.Invoke(ctx, LaunchService_GetRockets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) GetMathFact(ctx context.Context, in *GetMathFactRequest, opts ...grpc.CallOption) (*MathFact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MathFact)
	err := c.cc.Invoke(ctx, LaunchService_GetMathFact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) GetAPOD(ctx context.Context, in *GetAPODRequest, opts ...grpc.CallOption) (*APOD, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(APOD)
	err := c.cc.Invoke(ctx, LaunchService_GetAPOD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaunchServiceServer is the server API for LaunchService service.
// All implementations must embed UnimplementedLaunchServiceServer
// for forward compatibility.
//
// Launch service definition
type LaunchServiceServer interface {
	// Get the latest launch
	GetLatestLaunch(context.Context, *LatestLaunchRequest) (*Launch, error)
	// Get a specific rocket by ID
	GetRocket(context.Context, *GetRocketRequest) (*Rocket, error)
	// Get all rockets
	GetRockets(context.Context, *GetRocketsRequest) (*GetRocketsResponse, error)
	// Get a random math fact
	GetMathFact(context.Context, *GetMathFactRequest) (*MathFact, error)
	// Get NASA Astronomy Picture of the Day
	GetAPOD(context.Context, *GetAPODRequest) (*APOD, error)
	mustEmbedUnimplementedLaunchServiceServer()
}

// UnimplementedLaunchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLaunchServiceServer struct{}

func (UnimplementedLaunchServiceServer) GetLatestLaunch(context.Context, *LatestLaunchRequest) (*Launch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestLaunch not implemented")
}
func (UnimplementedLaunchServiceServer) GetRocket(context.Context, *GetRocketRequest) (*Rocket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRocket not implemented")
}
func (UnimplementedLaunchServiceServer) GetRockets(context.Context, *GetRocketsRequest) (*GetRocketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRockets not implemented")
}
func (UnimplementedLaunchServiceServer) GetMathFact(context.Context, *GetMathFactRequest) (*MathFact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMathFact not implemented")
}
func (UnimplementedLaunchServiceServer) GetAPOD(context.Context, *GetAPODRequest) (*APOD, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPOD not implemented")
}
func (UnimplementedLaunchServiceServer) mustEmbedUnimplementedLaunchServiceServer() {}
func (UnimplementedLaunchServiceServer) testEmbeddedByValue()                       {}

// UnsafeLaunchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaunchServiceServer will
// result in compilation errors.
type UnsafeLaunchServiceServer interface {
	mustEmbedUnimplementedLaunchServiceServer()
}

func RegisterLaunchServiceServer(s grpc.ServiceRegistrar, srv LaunchServiceServer) {
	// If the following call pancis, it indicates UnimplementedLaunchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LaunchService_ServiceDesc, srv)
}

func _LaunchService_GetLatestLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).GetLatestLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LaunchService_GetLatestLaunch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).GetLatestLaunch(ctx, req.(*LatestLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_GetRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).GetRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LaunchService_GetRocket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).GetRocket(ctx, req.(*GetRocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_GetRockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).GetRockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LaunchService_GetRockets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).GetRockets(ctx, req.(*GetRocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_GetMathFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMathFactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).GetMathFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LaunchService_GetMathFact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).GetMathFact(ctx, req.(*GetMathFactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_GetAPOD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPODRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).GetAPOD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LaunchService_GetAPOD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).GetAPOD(ctx, req.(*GetAPODRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LaunchService_ServiceDesc is the grpc.ServiceDesc for LaunchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LaunchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space.LaunchService",
	HandlerType: (*LaunchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestLaunch",
			Handler:    _LaunchService_GetLatestLaunch_Handler,
		},
		{
			MethodName: "GetRocket",
			Handler:    _LaunchService_GetRocket_Handler,
		},
		{
			MethodName: "GetRockets",
			Handler:    _LaunchService_GetRockets_Handler,
		},
		{
			MethodName: "GetMathFact",
			Handler:    _LaunchService_GetMathFact_Handler,
		},
		{
			MethodName: "GetAPOD",
			Handler:    _LaunchService_GetAPOD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/grpc/space.proto",
}
